#pragma once
#include <memory>

namespace cpph {
inline namespace stdfwd {
    using std::nothrow;

using std::enable_shared_from_this;
using std::shared_ptr;
using std::unique_ptr;
using std::weak_ptr;

using std::make_shared;
using std::make_unique;

using std::const_pointer_cast;
using std::dynamic_pointer_cast;
using std::reinterpret_pointer_cast;
using std::static_pointer_cast;

template <typename T, typename Deleter = std::default_delete<T>>
using ptr = std::unique_ptr<T, Deleter>;

template<typename T>
using sptr = std::shared_ptr<T>;

template<typename T>
using wptr = std::weak_ptr<T>;

}  // namespace stdfwd
}  // namespace cpph
